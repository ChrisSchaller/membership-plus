//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A unified and abstract entity access interface.
    /// </summary>
    public interface IDbEntity
    {
        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        string DistinctString { get; set; }
    }

    /// <summary>
    /// A wrapper class providing additional abstraction to types entities inside a relational data source. It is used to representing a tree node
    /// in a interdependent entities of a hierarchic entity set.
    /// </summary>
    /// <typeparam name="EType">
    ///  The type of the entity that the current node is abstracting.
    /// </typeparam>
    [DataContract]
    public class EntityAbs<EType> where EType: class, IDbEntity
    {
        public EntityAbs(EType data)
        {
            _dataBehind = data;
            if (data != null)
                data.DistinctString = null;
            NodeLabel = data != null ? data.DistinctString : "";
        }

        /// <summary>
        /// A label to identify the node, most likely the <see cref="IDbEntity.DistinctString" /> of the entity.
        /// </summary>
        [DataMember]
        public string NodeLabel
        {
            get;
            set;
        }

        /// <summary>
        /// The entity represented by the node.
        /// </summary>
        [DataMember]
        public EType DataBehind
        {
            get { return _dataBehind; }
            set { _dataBehind = value; }
        }
        private EType _dataBehind = null;

        /// <summary>
        /// Whether or not the current node has a parent.
        /// </summary>
        [DataMember]
        public bool ParentExists
        {
            get;
            set;
        }

        /// <summary>
        /// Whether or not the current node has child nodes.
        /// </summary>
        [DataMember]
        public bool ChildExists
        {
            get;
            set;
        }

        /// <summary>
        /// Whether or not children are loaded.
        /// </summary>
        [DataMember]
        public bool IsChildsLoaded
        {
            get { return _isChildsLoaded; }
            set { _isChildsLoaded = value; }
        }
        private bool _isChildsLoaded = false;

        /// <summary>
        /// The list of child nodes, if any.
        /// </summary>
        [DataMember]
        public List<EntityAbs<EType>> ChildEntities
        {
            get 
            {
                if (_childEntities == null)
                    _childEntities = new List<EntityAbs<EType>>();
                return _childEntities;
            }
            set { _childEntities = value; }
        }
        private List<EntityAbs<EType>> _childEntities = null;
    }
}