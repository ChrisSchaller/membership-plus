//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    public interface IJointSet
    {
        string NextJoin(string thismember, string psetid);
    }

    public class SetRefTree
    {
        public SetRefInfo CurrentRef
        {
            get;
            set;
        }

        public bool UniqueRequired
        {
            get;
            set;
        }

        public List<SetRefInfo> RefRoots
        {
            get 
            {
                if (_refRoots == null)
                    _refRoots = new List<SetRefInfo>();
                return _refRoots;
            }
        }
        private List<SetRefInfo> _refRoots = null;

        public bool IsNonEmpty()
        {
            return RefRoots.Count > 0;
        }
    }

    public class SetRefInfo
    {
        public string JointSetPath_
        {
            get;
            set;
        }

        public string JointSetName_
        {
            get;
            set;
        }

        public string[] JointKeys_
        {
            get;
            set;
        }

        public string CurrSetPath_
        {
            get;
            set;
        }

        public string CurrSetName_
        {
            get;
            set;
        }

        public string[] CurrKeys_
        {
            get;
            set;
        }

        public string MemberRef
        {
            get;
            set;
        }

        public Dictionary<string, string> MemberAttribs
        {
            get;
            set;
        }

        public IJointSet SetRef
        {
            get;
            set;
        }

        public SetRefInfo ParentRef
        {
            get { return _parentRef == null ? null : _parentRef.Target as SetRefInfo; }
            set { _parentRef = value == null ? null : new WeakReference(value); } 
        }
        private WeakReference _parentRef = null;

        public List<SetRefInfo> ChildRefs
        {
            get 
            {
                if (_childRefs == null)
                    _childRefs = new List<SetRefInfo>();
                return _childRefs;
            }
        }
        private List<SetRefInfo> _childRefs = null;

        public string GetRefPath(string sep = "_")
        {
            SetRefInfo i = this;
            string path = "";
            while (i != null)
            {
                if (i == this)
                    path = i.MemberRef;
                else
                    path = i.MemberRef + sep + path;
                i = i.ParentRef;
            }
            return path;
        }
    }
}
