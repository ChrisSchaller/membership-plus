//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "UserAssociations" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>FromUserID</term>
    ///      <description>See <see cref="UserAssociation.FromUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>ToUserID</term>
    ///      <description>See <see cref="UserAssociation.ToUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>TypeID</term>
    ///      <description>See <see cref="UserAssociation.TypeID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>FromUserID</term>
    ///      <description>See <see cref="UserAssociation.FromUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>ToUserID</term>
    ///      <description>See <see cref="UserAssociation.ToUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>TypeID</term>
    ///      <description>See <see cref="UserAssociation.TypeID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CreateDate</term>
    ///      <description>See <see cref="UserAssociation.CreateDate" />. Fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>AssocMemo</term>
    ///      <description>See <see cref="UserAssociation.AssocMemo" />. Editable; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>FromUserID</term>
    ///      <description>See <see cref="UserAssociation.FromUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>ToUserID</term>
    ///      <description>See <see cref="UserAssociation.ToUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>TypeID</term>
    ///      <description>See <see cref="UserAssociation.TypeID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>UserAssociationTypeRef</term>
    ///      <description>See <see cref="UserAssociation.UserAssociationTypeRef" />, which is a member of the data set "UserAssociationTypes" for <see cref="UserAssociationType" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>User_FromUserID</term>
    ///      <description>See <see cref="UserAssociation.User_FromUserID" />, which is a member of the data set "Users" for <see cref="User" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>User_ToUserID</term>
    ///      <description>See <see cref="UserAssociation.User_ToUserID" />, which is a member of the data set "Users" for <see cref="User" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    public class UserAssociation : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.FromUserID + ":" + this.ToUserID + ":" + this.TypeID.ToString();
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IUserAssociationService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "FromUserID = " + FromUserID + "\r\n";
                str += "ToUserID = " + ToUserID + "\r\n";
                str += "TypeID = " + TypeID + "\r\n";
                if (IsAssocMemoModified)
                    str += "Modified [AssocMemo] = " + AssocMemo + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            LoadUserAssociationTypeRef();
            LoadUser_FromUserID();
            LoadUser_ToUserID();
            return String.Format(@"[{0}] From {1} to {2}", (UserAssociationTypeRef != null ? UserAssociationTypeRef.DistinctString : ""), (User_FromUserID != null ? User_FromUserID.DistinctString : ""), (User_ToUserID != null ? User_ToUserID.DistinctString : ""));
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string FromUserID
        { 
            get
            {
                return _FromUserID;
            }
            set
            {
                if (_FromUserID != value)
                {
                    _FromUserID = value;
                }
            }
        }
        private string _FromUserID = default(string);

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ToUserID
        { 
            get
            {
                return _ToUserID;
            }
            set
            {
                if (_ToUserID != value)
                {
                    _ToUserID = value;
                }
            }
        }
        private string _ToUserID = default(string);

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public int TypeID
        { 
            get
            {
                return _TypeID;
            }
            set
            {
                if (_TypeID != value)
                {
                    _TypeID = value;
                }
            }
        }
        private int _TypeID = default(int);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public DateTime CreateDate
        { 
            get
            {
                return _CreateDate;
            }
            set
            {
                if (_CreateDate != value)
                {
                    _CreateDate = value;
                }
            }
        }
        private DateTime _CreateDate = default(DateTime);

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string AssocMemo
        { 
            get
            {
                return _AssocMemo;
            }
            set
            {
                if (_AssocMemo != value)
                {
                    _AssocMemo = value;
                    if (StartAutoUpdating)
                        IsAssocMemoModified = true;
                }
            }
        }
        private string _AssocMemo = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="AssocMemo" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="AssocMemo" /> only if this is set to true no matter what
        /// the actual value of <see cref="AssocMemo" /> is.
        /// </summary>
        [DataMember]
        public bool IsAssocMemoModified
        { 
            get
            {
                return _isAssocMemoModified;
            }
            set
            {
                _isAssocMemoModified = value;
            }
        }
        private bool _isAssocMemoModified = false;

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "UserAssociationTypes" for <see cref="UserAssociationType" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserAssociation.TypeID" /> }.
        /// </summary>
        [DataMember]
        public UserAssociationType UserAssociationTypeRef
        {
            get 
            {
                if (_UserAssociationTypeRef == null && AutoLoadUserAssociationTypeRef != null)
                    _UserAssociationTypeRef = AutoLoadUserAssociationTypeRef();
                return _UserAssociationTypeRef; 
            }
            set 
            { 
                _UserAssociationTypeRef = value; 
            }
        }
        private UserAssociationType _UserAssociationTypeRef = null;

        /// <summary>
        /// <see cref="UserAssociation.UserAssociationTypeRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserAssociation.DelLoadUserAssociationTypeRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserAssociationTypeRef()
        {
            if (_UserAssociationTypeRef != null)
                return;
            if (DelLoadUserAssociationTypeRef != null)
                _UserAssociationTypeRef = DelLoadUserAssociationTypeRef();
        }

        /// <summary>
        /// A delegate to load <see cref="UserAssociation.UserAssociationTypeRef" />.
        /// </summary>
        public Func<UserAssociationType> DelLoadUserAssociationTypeRef = null;

        /// <summary>
        /// A delegate to load <see cref="UserAssociation.UserAssociationTypeRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<UserAssociationType> AutoLoadUserAssociationTypeRef = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserAssociation.FromUserID" /> }.
        /// </summary>
        [DataMember]
        public User User_FromUserID
        {
            get 
            {
                if (_User_FromUserID == null && AutoLoadUser_FromUserID != null)
                    _User_FromUserID = AutoLoadUser_FromUserID();
                return _User_FromUserID; 
            }
            set 
            { 
                _User_FromUserID = value; 
            }
        }
        private User _User_FromUserID = null;

        /// <summary>
        /// <see cref="UserAssociation.User_FromUserID" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserAssociation.DelLoadUser_FromUserID" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUser_FromUserID()
        {
            if (_User_FromUserID != null)
                return;
            if (DelLoadUser_FromUserID != null)
                _User_FromUserID = DelLoadUser_FromUserID();
        }

        /// <summary>
        /// A delegate to load <see cref="UserAssociation.User_FromUserID" />.
        /// </summary>
        public Func<User> DelLoadUser_FromUserID = null;

        /// <summary>
        /// A delegate to load <see cref="UserAssociation.User_FromUserID" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUser_FromUserID = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserAssociation.ToUserID" /> }.
        /// </summary>
        [DataMember]
        public User User_ToUserID
        {
            get 
            {
                if (_User_ToUserID == null && AutoLoadUser_ToUserID != null)
                    _User_ToUserID = AutoLoadUser_ToUserID();
                return _User_ToUserID; 
            }
            set 
            { 
                _User_ToUserID = value; 
            }
        }
        private User _User_ToUserID = null;

        /// <summary>
        /// <see cref="UserAssociation.User_ToUserID" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserAssociation.DelLoadUser_ToUserID" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUser_ToUserID()
        {
            if (_User_ToUserID != null)
                return;
            if (DelLoadUser_ToUserID != null)
                _User_ToUserID = DelLoadUser_ToUserID();
        }

        /// <summary>
        /// A delegate to load <see cref="UserAssociation.User_ToUserID" />.
        /// </summary>
        public Func<User> DelLoadUser_ToUserID = null;

        /// <summary>
        /// A delegate to load <see cref="UserAssociation.User_ToUserID" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUser_ToUserID = null;

#endregion

#region Entities that depend on the current one.

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(UserAssociation other)
        {
            if (other == null)
                return false;
            if (FromUserID != other.FromUserID)
                return false;
            if (ToUserID != other.ToUserID)
                return false;
            if (TypeID != other.TypeID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(UserAssociation other)
        {
            if (other == null)
                return false;
            else
                return FromUserID == other.FromUserID &&  ToUserID == other.ToUserID &&  TypeID == other.TypeID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(UserAssociation from, UserAssociation to)
        {
            if (to.IsPersisted)
            {
                if (from.IsAssocMemoModified && !to.IsAssocMemoModified)
                {
                    to.AssocMemo = from.AssocMemo;
                    to.IsAssocMemoModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.FromUserID = from.FromUserID;
                to.ToUserID = from.ToUserID;
                to.TypeID = from.TypeID;
                to.CreateDate = from.CreateDate;
                to.AssocMemo = from.AssocMemo;
                to.IsAssocMemoModified = from.IsAssocMemoModified;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(UserAssociation newdata)
        {
            int cnt = 0;
            if (AssocMemo != newdata.AssocMemo)
            {
                AssocMemo = newdata.AssocMemo;
                IsAssocMemoModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (!IsEntityChanged)
                IsEntityChanged = IsAssocMemoModified;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public UserAssociation ShallowCopy(bool allData = false, bool preserveState = false)
        {
            UserAssociation e = new UserAssociation();
            e.StartAutoUpdating = false;
            e.FromUserID = FromUserID;
            e.ToUserID = ToUserID;
            e.TypeID = TypeID;
            e.CreateDate = CreateDate;
            e.AssocMemo = AssocMemo;
            if (preserveState)
                e.IsAssocMemoModified = IsAssocMemoModified;
            else
                e.IsAssocMemoModified = false;
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[UserAssociation]] =====----
  FromUserID = '" + FromUserID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  ToUserID = '" + ToUserID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  TypeID = " + TypeID + @"");
            sb.Append(@" (natural id)");
            sb.Append(@"
  CreateDate = " + CreateDate + @"
  AssocMemo = '" + (AssocMemo != null ? AssocMemo : "null") + @"'");
            if (IsAssocMemoModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="UserAssociation" />.
    ///</summary>
    [DataContract]
    public class UserAssociationUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public UserAssociation UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public UserAssociation ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
