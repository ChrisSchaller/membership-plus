//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "Users" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="User.ID" />. Primary key; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Username</term>
    ///      <description>See <see cref="User.Username" />. Intrinsic id; fixed; not null; max-length = 128 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CreateOn</term>
    ///      <description>See <see cref="User.CreateOn" />. Fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Password</term>
    ///      <description>See <see cref="User.Password" />. Editable; not null; max-length = 128 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>PasswordFormat</term>
    ///      <description>See <see cref="User.PasswordFormat" />. Editable; not null; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>PasswordQuestion</term>
    ///      <description>See <see cref="User.PasswordQuestion" />. Editable; nullable; max-length = 128 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>PasswordAnswer</term>
    ///      <description>See <see cref="User.PasswordAnswer" />. Editable; nullable; max-length = 128 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>PasswordSalt</term>
    ///      <description>See <see cref="User.PasswordSalt" />. Editable; not null; max-length = 128 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>FirstName</term>
    ///      <description>See <see cref="User.FirstName" />. Editable; nullable; max-length = 100 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>LastName</term>
    ///      <description>See <see cref="User.LastName" />. Editable; nullable; max-length = 100 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>IsAnonymous</term>
    ///      <description>See <see cref="User.IsAnonymous" />. Editable; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>IsApproved</term>
    ///      <description>See <see cref="User.IsApproved" />. Editable; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>Status</term>
    ///      <description>See <see cref="User.Status" />. Editable; not null; max-length = 70 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>TimeZone</term>
    ///      <description>See <see cref="User.TimeZone" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>FailedPasswordAnswerAttemptCount</term>
    ///      <description>See <see cref="User.FailedPasswordAnswerAttemptCount" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>FailedPasswordAnswerAttemptWindowStart</term>
    ///      <description>See <see cref="User.FailedPasswordAnswerAttemptWindowStart" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>FailedPasswordAttemptCount</term>
    ///      <description>See <see cref="User.FailedPasswordAttemptCount" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>FailedPasswordAttemptWindowStart</term>
    ///      <description>See <see cref="User.FailedPasswordAttemptWindowStart" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>LastLoginDate</term>
    ///      <description>See <see cref="User.LastLoginDate" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>LastPasswordChangedDate</term>
    ///      <description>See <see cref="User.LastPasswordChangedDate" />. Editable; nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>The following entity sets depend on this entity</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Announcements</term>
    ///      <description>See <see cref="User.Announcements" />, which is a sub-set of the data set "Announcements" for <see cref="Announcement" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>Communications</term>
    ///      <description>See <see cref="User.Communications" />, which is a sub-set of the data set "Communications" for <see cref="Communication" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>EventCalendar_UserIDs</term>
    ///      <description>See <see cref="User.EventCalendar_UserIDs" />, which is a sub-set of the data set "EventCalendar" for <see cref="EventCalendar" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>EventCalendar_CreatedUserIDs</term>
    ///      <description>See <see cref="User.EventCalendar_CreatedUserIDs" />, which is a sub-set of the data set "EventCalendar" for <see cref="EventCalendar" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>MemberNotifications</term>
    ///      <description>See <see cref="User.MemberNotifications" />, which is a sub-set of the data set "MemberNotifications" for <see cref="MemberNotification" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>NotificationTaskSchedules</term>
    ///      <description>See <see cref="User.NotificationTaskSchedules" />, which is a sub-set of the data set "NotificationTaskSchedules" for <see cref="NotificationTaskSchedule" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserAppMembers</term>
    ///      <description>See <see cref="User.UserAppMembers" />, which is a sub-set of the data set "UserAppMembers" for <see cref="UserAppMember" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserAssociation_FromUserIDs</term>
    ///      <description>See <see cref="User.UserAssociation_FromUserIDs" />, which is a sub-set of the data set "UserAssociations" for <see cref="UserAssociation" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserAssociation_ToUserIDs</term>
    ///      <description>See <see cref="User.UserAssociation_ToUserIDs" />, which is a sub-set of the data set "UserAssociations" for <see cref="UserAssociation" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserAssocInvitation_FromUserIDs</term>
    ///      <description>See <see cref="User.UserAssocInvitation_FromUserIDs" />, which is a sub-set of the data set "UserAssocInvitations" for <see cref="UserAssocInvitation" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserAssocInvitation_ToUserIDs</term>
    ///      <description>See <see cref="User.UserAssocInvitation_ToUserIDs" />, which is a sub-set of the data set "UserAssocInvitations" for <see cref="UserAssocInvitation" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserDetails</term>
    ///      <description>See <see cref="User.UserDetails" />, which is a sub-set of the data set "UserDetails" for <see cref="UserDetail" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserGroupMembers</term>
    ///      <description>See <see cref="User.UserGroupMembers" />, which is a sub-set of the data set "UserGroupMembers" for <see cref="UserGroupMember" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserProfiles</term>
    ///      <description>See <see cref="User.UserProfiles" />, which is a sub-set of the data set "UserProfiles" for <see cref="UserProfile" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UsersInRole_UserIDs</term>
    ///      <description>See <see cref="User.UsersInRole_UserIDs" />, which is a sub-set of the data set "UsersInRoles" for <see cref="UsersInRole" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UsersInRole_AdminIDs</term>
    ///      <description>See <see cref="User.UsersInRole_AdminIDs" />, which is a sub-set of the data set "UsersInRoles" for <see cref="UsersInRole" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UsersRoleHistory_UserIDs</term>
    ///      <description>See <see cref="User.UsersRoleHistory_UserIDs" />, which is a sub-set of the data set "UsersRoleHistories" for <see cref="UsersRoleHistory" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UsersRoleHistory_OperatorIDs</term>
    ///      <description>See <see cref="User.UsersRoleHistory_OperatorIDs" />, which is a sub-set of the data set "UsersRoleHistories" for <see cref="UsersRoleHistory" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    public class User : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool IsInitializing
        {
            get { return _isInitializing; }
            set { _isInitializing = value; }
        }
        private bool _isInitializing = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IUserService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            return String.Format(@"{0}", Username.Trim());
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; fixed; not null.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ID
        { 
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                }
            }
        }
        private string _ID = default(string);

        /// <summary>
        /// Meta-info: editable; not null; max-length = 128 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(128)]
        [DataMember(IsRequired = true)]
        public string Password
        { 
            get
            {
                return _Password;
            }
            set
            {
                if (_Password != value)
                {
                    _Password = value;
                    if (!IsInitializing)
                        IsPasswordModified = true;
                }
            }
        }
        private string _Password = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Password" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Password" /> only if this is set to true no matter what
        /// the actual value of <see cref="Password" /> is.
        /// </summary>
        [DataMember]
        public bool IsPasswordModified
        { 
            get
            {
                return _isPasswordModified;
            }
            set
            {
                _isPasswordModified = value;
            }
        }
        private bool _isPasswordModified = false;

        /// <summary>
        /// Meta-info: editable; not null; max-length = 50 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = true)]
        public string PasswordFormat
        { 
            get
            {
                return _PasswordFormat;
            }
            set
            {
                if (_PasswordFormat != value)
                {
                    _PasswordFormat = value;
                    if (!IsInitializing)
                        IsPasswordFormatModified = true;
                }
            }
        }
        private string _PasswordFormat = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="PasswordFormat" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="PasswordFormat" /> only if this is set to true no matter what
        /// the actual value of <see cref="PasswordFormat" /> is.
        /// </summary>
        [DataMember]
        public bool IsPasswordFormatModified
        { 
            get
            {
                return _isPasswordFormatModified;
            }
            set
            {
                _isPasswordFormatModified = value;
            }
        }
        private bool _isPasswordFormatModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 128 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(128)]
        [DataMember(IsRequired = false)]
        public string PasswordQuestion
        { 
            get
            {
                return _PasswordQuestion;
            }
            set
            {
                if (_PasswordQuestion != value)
                {
                    _PasswordQuestion = value;
                    if (!IsInitializing)
                        IsPasswordQuestionModified = true;
                }
            }
        }
        private string _PasswordQuestion = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="PasswordQuestion" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="PasswordQuestion" /> only if this is set to true no matter what
        /// the actual value of <see cref="PasswordQuestion" /> is.
        /// </summary>
        [DataMember]
        public bool IsPasswordQuestionModified
        { 
            get
            {
                return _isPasswordQuestionModified;
            }
            set
            {
                _isPasswordQuestionModified = value;
            }
        }
        private bool _isPasswordQuestionModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 128 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(128)]
        [DataMember(IsRequired = false)]
        public string PasswordAnswer
        { 
            get
            {
                return _PasswordAnswer;
            }
            set
            {
                if (_PasswordAnswer != value)
                {
                    _PasswordAnswer = value;
                    if (!IsInitializing)
                        IsPasswordAnswerModified = true;
                }
            }
        }
        private string _PasswordAnswer = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="PasswordAnswer" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="PasswordAnswer" /> only if this is set to true no matter what
        /// the actual value of <see cref="PasswordAnswer" /> is.
        /// </summary>
        [DataMember]
        public bool IsPasswordAnswerModified
        { 
            get
            {
                return _isPasswordAnswerModified;
            }
            set
            {
                _isPasswordAnswerModified = value;
            }
        }
        private bool _isPasswordAnswerModified = false;

        /// <summary>
        /// Meta-info: editable; not null; max-length = 128 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(128)]
        [DataMember(IsRequired = true)]
        public string PasswordSalt
        { 
            get
            {
                return _PasswordSalt;
            }
            set
            {
                if (_PasswordSalt != value)
                {
                    _PasswordSalt = value;
                    if (!IsInitializing)
                        IsPasswordSaltModified = true;
                }
            }
        }
        private string _PasswordSalt = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="PasswordSalt" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="PasswordSalt" /> only if this is set to true no matter what
        /// the actual value of <see cref="PasswordSalt" /> is.
        /// </summary>
        [DataMember]
        public bool IsPasswordSaltModified
        { 
            get
            {
                return _isPasswordSaltModified;
            }
            set
            {
                _isPasswordSaltModified = value;
            }
        }
        private bool _isPasswordSaltModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 100 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(100)]
        [DataMember(IsRequired = false)]
        public string FirstName
        { 
            get
            {
                return _FirstName;
            }
            set
            {
                if (_FirstName != value)
                {
                    _FirstName = value;
                    if (!IsInitializing)
                        IsFirstNameModified = true;
                }
            }
        }
        private string _FirstName = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="FirstName" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="FirstName" /> only if this is set to true no matter what
        /// the actual value of <see cref="FirstName" /> is.
        /// </summary>
        [DataMember]
        public bool IsFirstNameModified
        { 
            get
            {
                return _isFirstNameModified;
            }
            set
            {
                _isFirstNameModified = value;
            }
        }
        private bool _isFirstNameModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 100 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(100)]
        [DataMember(IsRequired = false)]
        public string LastName
        { 
            get
            {
                return _LastName;
            }
            set
            {
                if (_LastName != value)
                {
                    _LastName = value;
                    if (!IsInitializing)
                        IsLastNameModified = true;
                }
            }
        }
        private string _LastName = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="LastName" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LastName" /> only if this is set to true no matter what
        /// the actual value of <see cref="LastName" /> is.
        /// </summary>
        [DataMember]
        public bool IsLastNameModified
        { 
            get
            {
                return _isLastNameModified;
            }
            set
            {
                _isLastNameModified = value;
            }
        }
        private bool _isLastNameModified = false;

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public DateTime CreateOn
        { 
            get
            {
                return _CreateOn;
            }
            set
            {
                if (_CreateOn != value)
                {
                    _CreateOn = value;
                }
            }
        }
        private DateTime _CreateOn = default(DateTime);

        /// <summary>
        /// Meta-info: intrinsic id; fixed; not null; max-length = 128 characters.
        /// </summary>
        [Key]
        [Required]
        [Editable(false)]
        [StringLength(128)]
        [DataMember(IsRequired = true)]
        public string Username
        { 
            get
            {
                return _Username;
            }
            set
            {
                if (_Username != value)
                {
                    _Username = value;
                }
            }
        }
        private string _Username = default(string);

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public bool IsAnonymous
        { 
            get
            {
                return _IsAnonymous;
            }
            set
            {
                if (_IsAnonymous != value)
                {
                    _IsAnonymous = value;
                    if (!IsInitializing)
                        IsIsAnonymousModified = true;
                }
            }
        }
        private bool _IsAnonymous = default(bool);

        /// <summary>
        /// Wether or not the value of <see cref="IsAnonymous" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="IsAnonymous" /> only if this is set to true no matter what
        /// the actual value of <see cref="IsAnonymous" /> is.
        /// </summary>
        [DataMember]
        public bool IsIsAnonymousModified
        { 
            get
            {
                return _isIsAnonymousModified;
            }
            set
            {
                _isIsAnonymousModified = value;
            }
        }
        private bool _isIsAnonymousModified = false;

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public bool IsApproved
        { 
            get
            {
                return _IsApproved;
            }
            set
            {
                if (_IsApproved != value)
                {
                    _IsApproved = value;
                    if (!IsInitializing)
                        IsIsApprovedModified = true;
                }
            }
        }
        private bool _IsApproved = default(bool);

        /// <summary>
        /// Wether or not the value of <see cref="IsApproved" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="IsApproved" /> only if this is set to true no matter what
        /// the actual value of <see cref="IsApproved" /> is.
        /// </summary>
        [DataMember]
        public bool IsIsApprovedModified
        { 
            get
            {
                return _isIsApprovedModified;
            }
            set
            {
                _isIsApprovedModified = value;
            }
        }
        private bool _isIsApprovedModified = false;

        /// <summary>
        /// Meta-info: editable; not null; max-length = 70 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(70)]
        [DataMember(IsRequired = true)]
        public string Status
        { 
            get
            {
                return _Status;
            }
            set
            {
                if (_Status != value)
                {
                    _Status = value;
                    if (!IsInitializing)
                        IsStatusModified = true;
                }
            }
        }
        private string _Status = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Status" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Status" /> only if this is set to true no matter what
        /// the actual value of <see cref="Status" /> is.
        /// </summary>
        [DataMember]
        public bool IsStatusModified
        { 
            get
            {
                return _isStatusModified;
            }
            set
            {
                _isStatusModified = value;
            }
        }
        private bool _isStatusModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<int> TimeZone
        { 
            get
            {
                return _TimeZone;
            }
            set
            {
                if (_TimeZone != value)
                {
                    _TimeZone = value;
                    if (!IsInitializing)
                        IsTimeZoneModified = true;
                }
            }
        }
        private System.Nullable<int> _TimeZone = default(System.Nullable<int>);

        /// <summary>
        /// Wether or not the value of <see cref="TimeZone" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="TimeZone" /> only if this is set to true no matter what
        /// the actual value of <see cref="TimeZone" /> is.
        /// </summary>
        [DataMember]
        public bool IsTimeZoneModified
        { 
            get
            {
                return _isTimeZoneModified;
            }
            set
            {
                _isTimeZoneModified = value;
            }
        }
        private bool _isTimeZoneModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<int> FailedPasswordAnswerAttemptCount
        { 
            get
            {
                return _FailedPasswordAnswerAttemptCount;
            }
            set
            {
                if (_FailedPasswordAnswerAttemptCount != value)
                {
                    _FailedPasswordAnswerAttemptCount = value;
                    if (!IsInitializing)
                        IsFailedPasswordAnswerAttemptCountModified = true;
                }
            }
        }
        private System.Nullable<int> _FailedPasswordAnswerAttemptCount = default(System.Nullable<int>);

        /// <summary>
        /// Wether or not the value of <see cref="FailedPasswordAnswerAttemptCount" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="FailedPasswordAnswerAttemptCount" /> only if this is set to true no matter what
        /// the actual value of <see cref="FailedPasswordAnswerAttemptCount" /> is.
        /// </summary>
        [DataMember]
        public bool IsFailedPasswordAnswerAttemptCountModified
        { 
            get
            {
                return _isFailedPasswordAnswerAttemptCountModified;
            }
            set
            {
                _isFailedPasswordAnswerAttemptCountModified = value;
            }
        }
        private bool _isFailedPasswordAnswerAttemptCountModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> FailedPasswordAnswerAttemptWindowStart
        { 
            get
            {
                return _FailedPasswordAnswerAttemptWindowStart;
            }
            set
            {
                if (_FailedPasswordAnswerAttemptWindowStart != value)
                {
                    _FailedPasswordAnswerAttemptWindowStart = value;
                    if (!IsInitializing)
                        IsFailedPasswordAnswerAttemptWindowStartModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _FailedPasswordAnswerAttemptWindowStart = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="FailedPasswordAnswerAttemptWindowStart" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="FailedPasswordAnswerAttemptWindowStart" /> only if this is set to true no matter what
        /// the actual value of <see cref="FailedPasswordAnswerAttemptWindowStart" /> is.
        /// </summary>
        [DataMember]
        public bool IsFailedPasswordAnswerAttemptWindowStartModified
        { 
            get
            {
                return _isFailedPasswordAnswerAttemptWindowStartModified;
            }
            set
            {
                _isFailedPasswordAnswerAttemptWindowStartModified = value;
            }
        }
        private bool _isFailedPasswordAnswerAttemptWindowStartModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<int> FailedPasswordAttemptCount
        { 
            get
            {
                return _FailedPasswordAttemptCount;
            }
            set
            {
                if (_FailedPasswordAttemptCount != value)
                {
                    _FailedPasswordAttemptCount = value;
                    if (!IsInitializing)
                        IsFailedPasswordAttemptCountModified = true;
                }
            }
        }
        private System.Nullable<int> _FailedPasswordAttemptCount = default(System.Nullable<int>);

        /// <summary>
        /// Wether or not the value of <see cref="FailedPasswordAttemptCount" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="FailedPasswordAttemptCount" /> only if this is set to true no matter what
        /// the actual value of <see cref="FailedPasswordAttemptCount" /> is.
        /// </summary>
        [DataMember]
        public bool IsFailedPasswordAttemptCountModified
        { 
            get
            {
                return _isFailedPasswordAttemptCountModified;
            }
            set
            {
                _isFailedPasswordAttemptCountModified = value;
            }
        }
        private bool _isFailedPasswordAttemptCountModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> FailedPasswordAttemptWindowStart
        { 
            get
            {
                return _FailedPasswordAttemptWindowStart;
            }
            set
            {
                if (_FailedPasswordAttemptWindowStart != value)
                {
                    _FailedPasswordAttemptWindowStart = value;
                    if (!IsInitializing)
                        IsFailedPasswordAttemptWindowStartModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _FailedPasswordAttemptWindowStart = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="FailedPasswordAttemptWindowStart" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="FailedPasswordAttemptWindowStart" /> only if this is set to true no matter what
        /// the actual value of <see cref="FailedPasswordAttemptWindowStart" /> is.
        /// </summary>
        [DataMember]
        public bool IsFailedPasswordAttemptWindowStartModified
        { 
            get
            {
                return _isFailedPasswordAttemptWindowStartModified;
            }
            set
            {
                _isFailedPasswordAttemptWindowStartModified = value;
            }
        }
        private bool _isFailedPasswordAttemptWindowStartModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> LastLoginDate
        { 
            get
            {
                return _LastLoginDate;
            }
            set
            {
                if (_LastLoginDate != value)
                {
                    _LastLoginDate = value;
                    if (!IsInitializing)
                        IsLastLoginDateModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _LastLoginDate = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="LastLoginDate" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LastLoginDate" /> only if this is set to true no matter what
        /// the actual value of <see cref="LastLoginDate" /> is.
        /// </summary>
        [DataMember]
        public bool IsLastLoginDateModified
        { 
            get
            {
                return _isLastLoginDateModified;
            }
            set
            {
                _isLastLoginDateModified = value;
            }
        }
        private bool _isLastLoginDateModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> LastPasswordChangedDate
        { 
            get
            {
                return _LastPasswordChangedDate;
            }
            set
            {
                if (_LastPasswordChangedDate != value)
                {
                    _LastPasswordChangedDate = value;
                    if (!IsInitializing)
                        IsLastPasswordChangedDateModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _LastPasswordChangedDate = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="LastPasswordChangedDate" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LastPasswordChangedDate" /> only if this is set to true no matter what
        /// the actual value of <see cref="LastPasswordChangedDate" /> is.
        /// </summary>
        [DataMember]
        public bool IsLastPasswordChangedDateModified
        { 
            get
            {
                return _isLastPasswordChangedDateModified;
            }
            set
            {
                _isLastPasswordChangedDateModified = value;
            }
        }
        private bool _isLastPasswordChangedDateModified = false;

#endregion

#region Entities that the current one depends upon.

#endregion

#region Entities that depend on the current one.

        /// <summary>
        /// Entitity set <see cref="AnnouncementSet" /> for data set "Announcements" of <see cref="Announcement" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="AnnouncementSet" /> set is { <see cref="Announcement.CreatedUserID" /> }.
        /// </summary>
        [DataMember]
		public AnnouncementSet Announcements
		{
			get
			{
                if (_Announcements == null)
                    _Announcements = new AnnouncementSet();
				return _Announcements;
			}
            set
            {
                _Announcements = value;
            }
		}
		private AnnouncementSet _Announcements = null;

        /// <summary>
        /// Entitites enumeration expression for data set "Announcements" of <see cref="Announcement" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="AnnouncementSet" /> set is { <see cref="Announcement.CreatedUserID" /> }.
        /// </summary>
		public IEnumerable<Announcement> AnnouncementEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="Announcement" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="AnnouncementSet" /> set is { <see cref="Announcement.CreatedUserID" /> }.
        /// </summary>
        [DataMember]
		public Announcement[] ChangedAnnouncements
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="CommunicationSet" /> for data set "Communications" of <see cref="Communication" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="CommunicationSet" /> set is { <see cref="Communication.UserID" /> }.
        /// </summary>
        [DataMember]
		public CommunicationSet Communications
		{
			get
			{
                if (_Communications == null)
                    _Communications = new CommunicationSet();
				return _Communications;
			}
            set
            {
                _Communications = value;
            }
		}
		private CommunicationSet _Communications = null;

        /// <summary>
        /// Entitites enumeration expression for data set "Communications" of <see cref="Communication" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="CommunicationSet" /> set is { <see cref="Communication.UserID" /> }.
        /// </summary>
		public IEnumerable<Communication> CommunicationEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="Communication" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="CommunicationSet" /> set is { <see cref="Communication.UserID" /> }.
        /// </summary>
        [DataMember]
		public Communication[] ChangedCommunications
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="EventCalendarSet" /> for data set "EventCalendar" of <see cref="EventCalendar" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarSet" /> set is { <see cref="EventCalendar.UserID" /> }.
        /// </summary>
        [DataMember]
		public EventCalendarSet EventCalendar_UserIDs
		{
			get
			{
                if (_EventCalendar_UserIDs == null)
                    _EventCalendar_UserIDs = new EventCalendarSet();
				return _EventCalendar_UserIDs;
			}
            set
            {
                _EventCalendar_UserIDs = value;
            }
		}
		private EventCalendarSet _EventCalendar_UserIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "EventCalendar" of <see cref="EventCalendar" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarSet" /> set is { <see cref="EventCalendar.UserID" /> }.
        /// </summary>
		public IEnumerable<EventCalendar> EventCalendar_UserIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="EventCalendar" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarSet" /> set is { <see cref="EventCalendar.UserID" /> }.
        /// </summary>
        [DataMember]
		public EventCalendar[] ChangedEventCalendar_UserIDs
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="EventCalendarSet" /> for data set "EventCalendar" of <see cref="EventCalendar" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarSet" /> set is { <see cref="EventCalendar.CreatedUserID" /> }.
        /// </summary>
        [DataMember]
		public EventCalendarSet EventCalendar_CreatedUserIDs
		{
			get
			{
                if (_EventCalendar_CreatedUserIDs == null)
                    _EventCalendar_CreatedUserIDs = new EventCalendarSet();
				return _EventCalendar_CreatedUserIDs;
			}
            set
            {
                _EventCalendar_CreatedUserIDs = value;
            }
		}
		private EventCalendarSet _EventCalendar_CreatedUserIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "EventCalendar" of <see cref="EventCalendar" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarSet" /> set is { <see cref="EventCalendar.CreatedUserID" /> }.
        /// </summary>
		public IEnumerable<EventCalendar> EventCalendar_CreatedUserIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="EventCalendar" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarSet" /> set is { <see cref="EventCalendar.CreatedUserID" /> }.
        /// </summary>
        [DataMember]
		public EventCalendar[] ChangedEventCalendar_CreatedUserIDs
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="MemberNotificationSet" /> for data set "MemberNotifications" of <see cref="MemberNotification" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="MemberNotificationSet" /> set is { <see cref="MemberNotification.UserID" /> }.
        /// </summary>
        [DataMember]
		public MemberNotificationSet MemberNotifications
		{
			get
			{
                if (_MemberNotifications == null)
                    _MemberNotifications = new MemberNotificationSet();
				return _MemberNotifications;
			}
            set
            {
                _MemberNotifications = value;
            }
		}
		private MemberNotificationSet _MemberNotifications = null;

        /// <summary>
        /// Entitites enumeration expression for data set "MemberNotifications" of <see cref="MemberNotification" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="MemberNotificationSet" /> set is { <see cref="MemberNotification.UserID" /> }.
        /// </summary>
		public IEnumerable<MemberNotification> MemberNotificationEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="MemberNotification" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="MemberNotificationSet" /> set is { <see cref="MemberNotification.UserID" /> }.
        /// </summary>
        [DataMember]
		public MemberNotification[] ChangedMemberNotifications
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="NotificationTaskScheduleSet" /> for data set "NotificationTaskSchedules" of <see cref="NotificationTaskSchedule" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="NotificationTaskScheduleSet" /> set is { <see cref="NotificationTaskSchedule.AssignerID" /> }.
        /// </summary>
        [DataMember]
		public NotificationTaskScheduleSet NotificationTaskSchedules
		{
			get
			{
                if (_NotificationTaskSchedules == null)
                    _NotificationTaskSchedules = new NotificationTaskScheduleSet();
				return _NotificationTaskSchedules;
			}
            set
            {
                _NotificationTaskSchedules = value;
            }
		}
		private NotificationTaskScheduleSet _NotificationTaskSchedules = null;

        /// <summary>
        /// Entitites enumeration expression for data set "NotificationTaskSchedules" of <see cref="NotificationTaskSchedule" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="NotificationTaskScheduleSet" /> set is { <see cref="NotificationTaskSchedule.AssignerID" /> }.
        /// </summary>
		public IEnumerable<NotificationTaskSchedule> NotificationTaskScheduleEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="NotificationTaskSchedule" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="NotificationTaskScheduleSet" /> set is { <see cref="NotificationTaskSchedule.AssignerID" /> }.
        /// </summary>
        [DataMember]
		public NotificationTaskSchedule[] ChangedNotificationTaskSchedules
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserAppMemberSet" /> for data set "UserAppMembers" of <see cref="UserAppMember" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAppMemberSet" /> set is { <see cref="UserAppMember.UserID" /> }.
        /// </summary>
        [DataMember]
		public UserAppMemberSet UserAppMembers
		{
			get
			{
                if (_UserAppMembers == null)
                    _UserAppMembers = new UserAppMemberSet();
				return _UserAppMembers;
			}
            set
            {
                _UserAppMembers = value;
            }
		}
		private UserAppMemberSet _UserAppMembers = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserAppMembers" of <see cref="UserAppMember" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAppMemberSet" /> set is { <see cref="UserAppMember.UserID" /> }.
        /// </summary>
		public IEnumerable<UserAppMember> UserAppMemberEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserAppMember" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserAppMemberSet" /> set is { <see cref="UserAppMember.UserID" /> }.
        /// </summary>
        [DataMember]
		public UserAppMember[] ChangedUserAppMembers
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserAssociationSet" /> for data set "UserAssociations" of <see cref="UserAssociation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAssociationSet" /> set is { <see cref="UserAssociation.FromUserID" /> }.
        /// </summary>
        [DataMember]
		public UserAssociationSet UserAssociation_FromUserIDs
		{
			get
			{
                if (_UserAssociation_FromUserIDs == null)
                    _UserAssociation_FromUserIDs = new UserAssociationSet();
				return _UserAssociation_FromUserIDs;
			}
            set
            {
                _UserAssociation_FromUserIDs = value;
            }
		}
		private UserAssociationSet _UserAssociation_FromUserIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserAssociations" of <see cref="UserAssociation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAssociationSet" /> set is { <see cref="UserAssociation.FromUserID" /> }.
        /// </summary>
		public IEnumerable<UserAssociation> UserAssociation_FromUserIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserAssociation" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserAssociationSet" /> set is { <see cref="UserAssociation.FromUserID" /> }.
        /// </summary>
        [DataMember]
		public UserAssociation[] ChangedUserAssociation_FromUserIDs
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserAssociationSet" /> for data set "UserAssociations" of <see cref="UserAssociation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAssociationSet" /> set is { <see cref="UserAssociation.ToUserID" /> }.
        /// </summary>
        [DataMember]
		public UserAssociationSet UserAssociation_ToUserIDs
		{
			get
			{
                if (_UserAssociation_ToUserIDs == null)
                    _UserAssociation_ToUserIDs = new UserAssociationSet();
				return _UserAssociation_ToUserIDs;
			}
            set
            {
                _UserAssociation_ToUserIDs = value;
            }
		}
		private UserAssociationSet _UserAssociation_ToUserIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserAssociations" of <see cref="UserAssociation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAssociationSet" /> set is { <see cref="UserAssociation.ToUserID" /> }.
        /// </summary>
		public IEnumerable<UserAssociation> UserAssociation_ToUserIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserAssociation" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserAssociationSet" /> set is { <see cref="UserAssociation.ToUserID" /> }.
        /// </summary>
        [DataMember]
		public UserAssociation[] ChangedUserAssociation_ToUserIDs
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserAssocInvitationSet" /> for data set "UserAssocInvitations" of <see cref="UserAssocInvitation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAssocInvitationSet" /> set is { <see cref="UserAssocInvitation.FromUserID" /> }.
        /// </summary>
        [DataMember]
		public UserAssocInvitationSet UserAssocInvitation_FromUserIDs
		{
			get
			{
                if (_UserAssocInvitation_FromUserIDs == null)
                    _UserAssocInvitation_FromUserIDs = new UserAssocInvitationSet();
				return _UserAssocInvitation_FromUserIDs;
			}
            set
            {
                _UserAssocInvitation_FromUserIDs = value;
            }
		}
		private UserAssocInvitationSet _UserAssocInvitation_FromUserIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserAssocInvitations" of <see cref="UserAssocInvitation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAssocInvitationSet" /> set is { <see cref="UserAssocInvitation.FromUserID" /> }.
        /// </summary>
		public IEnumerable<UserAssocInvitation> UserAssocInvitation_FromUserIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserAssocInvitation" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserAssocInvitationSet" /> set is { <see cref="UserAssocInvitation.FromUserID" /> }.
        /// </summary>
        [DataMember]
		public UserAssocInvitation[] ChangedUserAssocInvitation_FromUserIDs
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserAssocInvitationSet" /> for data set "UserAssocInvitations" of <see cref="UserAssocInvitation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAssocInvitationSet" /> set is { <see cref="UserAssocInvitation.ToUserID" /> }.
        /// </summary>
        [DataMember]
		public UserAssocInvitationSet UserAssocInvitation_ToUserIDs
		{
			get
			{
                if (_UserAssocInvitation_ToUserIDs == null)
                    _UserAssocInvitation_ToUserIDs = new UserAssocInvitationSet();
				return _UserAssocInvitation_ToUserIDs;
			}
            set
            {
                _UserAssocInvitation_ToUserIDs = value;
            }
		}
		private UserAssocInvitationSet _UserAssocInvitation_ToUserIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserAssocInvitations" of <see cref="UserAssocInvitation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserAssocInvitationSet" /> set is { <see cref="UserAssocInvitation.ToUserID" /> }.
        /// </summary>
		public IEnumerable<UserAssocInvitation> UserAssocInvitation_ToUserIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserAssocInvitation" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserAssocInvitationSet" /> set is { <see cref="UserAssocInvitation.ToUserID" /> }.
        /// </summary>
        [DataMember]
		public UserAssocInvitation[] ChangedUserAssocInvitation_ToUserIDs
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserDetailSet" /> for data set "UserDetails" of <see cref="UserDetail" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserDetailSet" /> set is { <see cref="UserDetail.UserID" /> }.
        /// </summary>
        [DataMember]
		public UserDetailSet UserDetails
		{
			get
			{
                if (_UserDetails == null)
                    _UserDetails = new UserDetailSet();
				return _UserDetails;
			}
            set
            {
                _UserDetails = value;
            }
		}
		private UserDetailSet _UserDetails = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserDetails" of <see cref="UserDetail" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserDetailSet" /> set is { <see cref="UserDetail.UserID" /> }.
        /// </summary>
		public IEnumerable<UserDetail> UserDetailEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserDetail" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserDetailSet" /> set is { <see cref="UserDetail.UserID" /> }.
        /// </summary>
        [DataMember]
		public UserDetail[] ChangedUserDetails
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserGroupMemberSet" /> for data set "UserGroupMembers" of <see cref="UserGroupMember" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserGroupMemberSet" /> set is { <see cref="UserGroupMember.UserID" /> }.
        /// </summary>
        [DataMember]
		public UserGroupMemberSet UserGroupMembers
		{
			get
			{
                if (_UserGroupMembers == null)
                    _UserGroupMembers = new UserGroupMemberSet();
				return _UserGroupMembers;
			}
            set
            {
                _UserGroupMembers = value;
            }
		}
		private UserGroupMemberSet _UserGroupMembers = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserGroupMembers" of <see cref="UserGroupMember" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserGroupMemberSet" /> set is { <see cref="UserGroupMember.UserID" /> }.
        /// </summary>
		public IEnumerable<UserGroupMember> UserGroupMemberEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserGroupMember" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserGroupMemberSet" /> set is { <see cref="UserGroupMember.UserID" /> }.
        /// </summary>
        [DataMember]
		public UserGroupMember[] ChangedUserGroupMembers
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserProfileSet" /> for data set "UserProfiles" of <see cref="UserProfile" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserProfileSet" /> set is { <see cref="UserProfile.UserID" /> }.
        /// </summary>
        [DataMember]
		public UserProfileSet UserProfiles
		{
			get
			{
                if (_UserProfiles == null)
                    _UserProfiles = new UserProfileSet();
				return _UserProfiles;
			}
            set
            {
                _UserProfiles = value;
            }
		}
		private UserProfileSet _UserProfiles = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserProfiles" of <see cref="UserProfile" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserProfileSet" /> set is { <see cref="UserProfile.UserID" /> }.
        /// </summary>
		public IEnumerable<UserProfile> UserProfileEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserProfile" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserProfileSet" /> set is { <see cref="UserProfile.UserID" /> }.
        /// </summary>
        [DataMember]
		public UserProfile[] ChangedUserProfiles
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UsersInRoleSet" /> for data set "UsersInRoles" of <see cref="UsersInRole" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UsersInRoleSet" /> set is { <see cref="UsersInRole.UserID" /> }.
        /// </summary>
        [DataMember]
		public UsersInRoleSet UsersInRole_UserIDs
		{
			get
			{
                if (_UsersInRole_UserIDs == null)
                    _UsersInRole_UserIDs = new UsersInRoleSet();
				return _UsersInRole_UserIDs;
			}
            set
            {
                _UsersInRole_UserIDs = value;
            }
		}
		private UsersInRoleSet _UsersInRole_UserIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UsersInRoles" of <see cref="UsersInRole" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UsersInRoleSet" /> set is { <see cref="UsersInRole.UserID" /> }.
        /// </summary>
		public IEnumerable<UsersInRole> UsersInRole_UserIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UsersInRole" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UsersInRoleSet" /> set is { <see cref="UsersInRole.UserID" /> }.
        /// </summary>
        [DataMember]
		public UsersInRole[] ChangedUsersInRole_UserIDs
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UsersInRoleSet" /> for data set "UsersInRoles" of <see cref="UsersInRole" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UsersInRoleSet" /> set is { <see cref="UsersInRole.AdminID" /> }.
        /// </summary>
        [DataMember]
		public UsersInRoleSet UsersInRole_AdminIDs
		{
			get
			{
                if (_UsersInRole_AdminIDs == null)
                    _UsersInRole_AdminIDs = new UsersInRoleSet();
				return _UsersInRole_AdminIDs;
			}
            set
            {
                _UsersInRole_AdminIDs = value;
            }
		}
		private UsersInRoleSet _UsersInRole_AdminIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UsersInRoles" of <see cref="UsersInRole" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UsersInRoleSet" /> set is { <see cref="UsersInRole.AdminID" /> }.
        /// </summary>
		public IEnumerable<UsersInRole> UsersInRole_AdminIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UsersInRole" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UsersInRoleSet" /> set is { <see cref="UsersInRole.AdminID" /> }.
        /// </summary>
        [DataMember]
		public UsersInRole[] ChangedUsersInRole_AdminIDs
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UsersRoleHistorySet" /> for data set "UsersRoleHistories" of <see cref="UsersRoleHistory" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UsersRoleHistorySet" /> set is { <see cref="UsersRoleHistory.UserID" /> }.
        /// </summary>
        [DataMember]
		public UsersRoleHistorySet UsersRoleHistory_UserIDs
		{
			get
			{
                if (_UsersRoleHistory_UserIDs == null)
                    _UsersRoleHistory_UserIDs = new UsersRoleHistorySet();
				return _UsersRoleHistory_UserIDs;
			}
            set
            {
                _UsersRoleHistory_UserIDs = value;
            }
		}
		private UsersRoleHistorySet _UsersRoleHistory_UserIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UsersRoleHistories" of <see cref="UsersRoleHistory" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UsersRoleHistorySet" /> set is { <see cref="UsersRoleHistory.UserID" /> }.
        /// </summary>
		public IEnumerable<UsersRoleHistory> UsersRoleHistory_UserIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UsersRoleHistory" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UsersRoleHistorySet" /> set is { <see cref="UsersRoleHistory.UserID" /> }.
        /// </summary>
        [DataMember]
		public UsersRoleHistory[] ChangedUsersRoleHistory_UserIDs
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UsersRoleHistorySet" /> for data set "UsersRoleHistories" of <see cref="UsersRoleHistory" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UsersRoleHistorySet" /> set is { <see cref="UsersRoleHistory.OperatorID" /> }.
        /// </summary>
        [DataMember]
		public UsersRoleHistorySet UsersRoleHistory_OperatorIDs
		{
			get
			{
                if (_UsersRoleHistory_OperatorIDs == null)
                    _UsersRoleHistory_OperatorIDs = new UsersRoleHistorySet();
				return _UsersRoleHistory_OperatorIDs;
			}
            set
            {
                _UsersRoleHistory_OperatorIDs = value;
            }
		}
		private UsersRoleHistorySet _UsersRoleHistory_OperatorIDs = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UsersRoleHistories" of <see cref="UsersRoleHistory" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UsersRoleHistorySet" /> set is { <see cref="UsersRoleHistory.OperatorID" /> }.
        /// </summary>
		public IEnumerable<UsersRoleHistory> UsersRoleHistory_OperatorIDEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UsersRoleHistory" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UsersRoleHistorySet" /> set is { <see cref="UsersRoleHistory.OperatorID" /> }.
        /// </summary>
        [DataMember]
		public UsersRoleHistory[] ChangedUsersRoleHistory_OperatorIDs
		{
			get;
            set;
		}

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(User other)
        {
            if (other == null)
                return false;
            if (ID != other.ID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(User other)
        {
            if (other == null)
                return false;
            else
                return Username == other.Username;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(User from, User to)
        {
            if (to.IsPersisted)
            {
                if (from.IsPasswordModified && !to.IsPasswordModified)
                {
                    to.Password = from.Password;
                    to.IsPasswordModified = true;
                }
                if (from.IsPasswordFormatModified && !to.IsPasswordFormatModified)
                {
                    to.PasswordFormat = from.PasswordFormat;
                    to.IsPasswordFormatModified = true;
                }
                if (from.IsPasswordQuestionModified && !to.IsPasswordQuestionModified)
                {
                    to.PasswordQuestion = from.PasswordQuestion;
                    to.IsPasswordQuestionModified = true;
                }
                if (from.IsPasswordAnswerModified && !to.IsPasswordAnswerModified)
                {
                    to.PasswordAnswer = from.PasswordAnswer;
                    to.IsPasswordAnswerModified = true;
                }
                if (from.IsPasswordSaltModified && !to.IsPasswordSaltModified)
                {
                    to.PasswordSalt = from.PasswordSalt;
                    to.IsPasswordSaltModified = true;
                }
                if (from.IsFirstNameModified && !to.IsFirstNameModified)
                {
                    to.FirstName = from.FirstName;
                    to.IsFirstNameModified = true;
                }
                if (from.IsLastNameModified && !to.IsLastNameModified)
                {
                    to.LastName = from.LastName;
                    to.IsLastNameModified = true;
                }
                if (from.IsIsAnonymousModified && !to.IsIsAnonymousModified)
                {
                    to.IsAnonymous = from.IsAnonymous;
                    to.IsIsAnonymousModified = true;
                }
                if (from.IsIsApprovedModified && !to.IsIsApprovedModified)
                {
                    to.IsApproved = from.IsApproved;
                    to.IsIsApprovedModified = true;
                }
                if (from.IsStatusModified && !to.IsStatusModified)
                {
                    to.Status = from.Status;
                    to.IsStatusModified = true;
                }
                if (from.IsTimeZoneModified && !to.IsTimeZoneModified)
                {
                    to.TimeZone = from.TimeZone;
                    to.IsTimeZoneModified = true;
                }
                if (from.IsFailedPasswordAnswerAttemptCountModified && !to.IsFailedPasswordAnswerAttemptCountModified)
                {
                    to.FailedPasswordAnswerAttemptCount = from.FailedPasswordAnswerAttemptCount;
                    to.IsFailedPasswordAnswerAttemptCountModified = true;
                }
                if (from.IsFailedPasswordAnswerAttemptWindowStartModified && !to.IsFailedPasswordAnswerAttemptWindowStartModified)
                {
                    to.FailedPasswordAnswerAttemptWindowStart = from.FailedPasswordAnswerAttemptWindowStart;
                    to.IsFailedPasswordAnswerAttemptWindowStartModified = true;
                }
                if (from.IsFailedPasswordAttemptCountModified && !to.IsFailedPasswordAttemptCountModified)
                {
                    to.FailedPasswordAttemptCount = from.FailedPasswordAttemptCount;
                    to.IsFailedPasswordAttemptCountModified = true;
                }
                if (from.IsFailedPasswordAttemptWindowStartModified && !to.IsFailedPasswordAttemptWindowStartModified)
                {
                    to.FailedPasswordAttemptWindowStart = from.FailedPasswordAttemptWindowStart;
                    to.IsFailedPasswordAttemptWindowStartModified = true;
                }
                if (from.IsLastLoginDateModified && !to.IsLastLoginDateModified)
                {
                    to.LastLoginDate = from.LastLoginDate;
                    to.IsLastLoginDateModified = true;
                }
                if (from.IsLastPasswordChangedDateModified && !to.IsLastPasswordChangedDateModified)
                {
                    to.LastPasswordChangedDate = from.LastPasswordChangedDate;
                    to.IsLastPasswordChangedDateModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ID = from.ID;
                to.Password = from.Password;
                to.IsPasswordModified = from.IsPasswordModified;
                to.PasswordFormat = from.PasswordFormat;
                to.IsPasswordFormatModified = from.IsPasswordFormatModified;
                to.PasswordQuestion = from.PasswordQuestion;
                to.IsPasswordQuestionModified = from.IsPasswordQuestionModified;
                to.PasswordAnswer = from.PasswordAnswer;
                to.IsPasswordAnswerModified = from.IsPasswordAnswerModified;
                to.PasswordSalt = from.PasswordSalt;
                to.IsPasswordSaltModified = from.IsPasswordSaltModified;
                to.FirstName = from.FirstName;
                to.IsFirstNameModified = from.IsFirstNameModified;
                to.LastName = from.LastName;
                to.IsLastNameModified = from.IsLastNameModified;
                to.CreateOn = from.CreateOn;
                to.Username = from.Username;
                to.IsAnonymous = from.IsAnonymous;
                to.IsIsAnonymousModified = from.IsIsAnonymousModified;
                to.IsApproved = from.IsApproved;
                to.IsIsApprovedModified = from.IsIsApprovedModified;
                to.Status = from.Status;
                to.IsStatusModified = from.IsStatusModified;
                to.TimeZone = from.TimeZone;
                to.IsTimeZoneModified = from.IsTimeZoneModified;
                to.FailedPasswordAnswerAttemptCount = from.FailedPasswordAnswerAttemptCount;
                to.IsFailedPasswordAnswerAttemptCountModified = from.IsFailedPasswordAnswerAttemptCountModified;
                to.FailedPasswordAnswerAttemptWindowStart = from.FailedPasswordAnswerAttemptWindowStart;
                to.IsFailedPasswordAnswerAttemptWindowStartModified = from.IsFailedPasswordAnswerAttemptWindowStartModified;
                to.FailedPasswordAttemptCount = from.FailedPasswordAttemptCount;
                to.IsFailedPasswordAttemptCountModified = from.IsFailedPasswordAttemptCountModified;
                to.FailedPasswordAttemptWindowStart = from.FailedPasswordAttemptWindowStart;
                to.IsFailedPasswordAttemptWindowStartModified = from.IsFailedPasswordAttemptWindowStartModified;
                to.LastLoginDate = from.LastLoginDate;
                to.IsLastLoginDateModified = from.IsLastLoginDateModified;
                to.LastPasswordChangedDate = from.LastPasswordChangedDate;
                to.IsLastPasswordChangedDateModified = from.IsLastPasswordChangedDateModified;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(User newdata)
        {
            int cnt = 0;
            if (Password != newdata.Password)
            {
                Password = newdata.Password;
                IsPasswordModified = true;
                cnt++;
            }
            if (PasswordFormat != newdata.PasswordFormat)
            {
                PasswordFormat = newdata.PasswordFormat;
                IsPasswordFormatModified = true;
                cnt++;
            }
            if (PasswordQuestion != newdata.PasswordQuestion)
            {
                PasswordQuestion = newdata.PasswordQuestion;
                IsPasswordQuestionModified = true;
                cnt++;
            }
            if (PasswordAnswer != newdata.PasswordAnswer)
            {
                PasswordAnswer = newdata.PasswordAnswer;
                IsPasswordAnswerModified = true;
                cnt++;
            }
            if (PasswordSalt != newdata.PasswordSalt)
            {
                PasswordSalt = newdata.PasswordSalt;
                IsPasswordSaltModified = true;
                cnt++;
            }
            if (FirstName != newdata.FirstName)
            {
                FirstName = newdata.FirstName;
                IsFirstNameModified = true;
                cnt++;
            }
            if (LastName != newdata.LastName)
            {
                LastName = newdata.LastName;
                IsLastNameModified = true;
                cnt++;
            }
            if (IsAnonymous != newdata.IsAnonymous)
            {
                IsAnonymous = newdata.IsAnonymous;
                IsIsAnonymousModified = true;
                cnt++;
            }
            if (IsApproved != newdata.IsApproved)
            {
                IsApproved = newdata.IsApproved;
                IsIsApprovedModified = true;
                cnt++;
            }
            if (Status != newdata.Status)
            {
                Status = newdata.Status;
                IsStatusModified = true;
                cnt++;
            }
            if (TimeZone != newdata.TimeZone)
            {
                TimeZone = newdata.TimeZone;
                IsTimeZoneModified = true;
                cnt++;
            }
            if (FailedPasswordAnswerAttemptCount != newdata.FailedPasswordAnswerAttemptCount)
            {
                FailedPasswordAnswerAttemptCount = newdata.FailedPasswordAnswerAttemptCount;
                IsFailedPasswordAnswerAttemptCountModified = true;
                cnt++;
            }
            if (FailedPasswordAnswerAttemptWindowStart != newdata.FailedPasswordAnswerAttemptWindowStart)
            {
                FailedPasswordAnswerAttemptWindowStart = newdata.FailedPasswordAnswerAttemptWindowStart;
                IsFailedPasswordAnswerAttemptWindowStartModified = true;
                cnt++;
            }
            if (FailedPasswordAttemptCount != newdata.FailedPasswordAttemptCount)
            {
                FailedPasswordAttemptCount = newdata.FailedPasswordAttemptCount;
                IsFailedPasswordAttemptCountModified = true;
                cnt++;
            }
            if (FailedPasswordAttemptWindowStart != newdata.FailedPasswordAttemptWindowStart)
            {
                FailedPasswordAttemptWindowStart = newdata.FailedPasswordAttemptWindowStart;
                IsFailedPasswordAttemptWindowStartModified = true;
                cnt++;
            }
            if (LastLoginDate != newdata.LastLoginDate)
            {
                LastLoginDate = newdata.LastLoginDate;
                IsLastLoginDateModified = true;
                cnt++;
            }
            if (LastPasswordChangedDate != newdata.LastPasswordChangedDate)
            {
                LastPasswordChangedDate = newdata.LastPasswordChangedDate;
                IsLastPasswordChangedDateModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            IsInitializing = true;
            if (Password == null)
                Password = "";
            if (PasswordFormat == null)
                PasswordFormat = "";
            if (PasswordSalt == null)
                PasswordSalt = "";
            if (Username == null)
                Username = "";
            if (Status == null)
                Status = "";
            if (!IsEntityChanged)
                IsEntityChanged = IsPasswordModified || IsPasswordFormatModified || IsPasswordQuestionModified || IsPasswordAnswerModified || IsPasswordSaltModified || IsFirstNameModified || IsLastNameModified || IsIsAnonymousModified || IsIsApprovedModified || IsStatusModified || IsTimeZoneModified || IsFailedPasswordAnswerAttemptCountModified || IsFailedPasswordAnswerAttemptWindowStartModified || IsFailedPasswordAttemptCountModified || IsFailedPasswordAttemptWindowStartModified || IsLastLoginDateModified || IsLastPasswordChangedDateModified;
            IsInitializing = false;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public User ShallowCopy(bool allData = false)
        {
            User e = new User();
            e.IsInitializing = true;
            e.ID = ID;
            e.Password = Password;
            e.PasswordFormat = PasswordFormat;
            e.PasswordQuestion = PasswordQuestion;
            e.PasswordAnswer = PasswordAnswer;
            e.PasswordSalt = PasswordSalt;
            e.FirstName = FirstName;
            e.LastName = LastName;
            e.CreateOn = CreateOn;
            e.Username = Username;
            e.IsAnonymous = IsAnonymous;
            e.IsApproved = IsApproved;
            e.Status = Status;
            e.TimeZone = TimeZone;
            e.FailedPasswordAnswerAttemptCount = FailedPasswordAnswerAttemptCount;
            e.FailedPasswordAnswerAttemptWindowStart = FailedPasswordAnswerAttemptWindowStart;
            e.FailedPasswordAttemptCount = FailedPasswordAttemptCount;
            e.FailedPasswordAttemptWindowStart = FailedPasswordAttemptWindowStart;
            e.LastLoginDate = LastLoginDate;
            e.LastPasswordChangedDate = LastPasswordChangedDate;
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = true;
            e.IsEntityChanged = false;
            e.IsInitializing = false;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[User]] =====----
  ID = '" + ID + @"'
  Password = '" + Password + @"'");
            if (IsPasswordModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  PasswordFormat = '" + PasswordFormat + @"'");
            if (IsPasswordFormatModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  PasswordQuestion = '" + (PasswordQuestion != null ? PasswordQuestion : "null") + @"'");
            if (IsPasswordQuestionModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  PasswordAnswer = '" + (PasswordAnswer != null ? PasswordAnswer : "null") + @"'");
            if (IsPasswordAnswerModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  PasswordSalt = '" + PasswordSalt + @"'");
            if (IsPasswordSaltModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  FirstName = '" + (FirstName != null ? FirstName : "null") + @"'");
            if (IsFirstNameModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LastName = '" + (LastName != null ? LastName : "null") + @"'");
            if (IsLastNameModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  CreateOn = " + CreateOn + @"
  Username = '" + Username + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  IsAnonymous = " + IsAnonymous + @"");
            if (IsIsAnonymousModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  IsApproved = " + IsApproved + @"");
            if (IsIsApprovedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  Status = '" + Status + @"'");
            if (IsStatusModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  TimeZone = " + (TimeZone.HasValue ? TimeZone.Value.ToString() : "null") + @"");
            if (IsTimeZoneModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  FailedPasswordAnswerAttemptCount = " + (FailedPasswordAnswerAttemptCount.HasValue ? FailedPasswordAnswerAttemptCount.Value.ToString() : "null") + @"");
            if (IsFailedPasswordAnswerAttemptCountModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  FailedPasswordAnswerAttemptWindowStart = " + (FailedPasswordAnswerAttemptWindowStart.HasValue ? FailedPasswordAnswerAttemptWindowStart.Value.ToString() : "null") + @"");
            if (IsFailedPasswordAnswerAttemptWindowStartModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  FailedPasswordAttemptCount = " + (FailedPasswordAttemptCount.HasValue ? FailedPasswordAttemptCount.Value.ToString() : "null") + @"");
            if (IsFailedPasswordAttemptCountModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  FailedPasswordAttemptWindowStart = " + (FailedPasswordAttemptWindowStart.HasValue ? FailedPasswordAttemptWindowStart.Value.ToString() : "null") + @"");
            if (IsFailedPasswordAttemptWindowStartModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LastLoginDate = " + (LastLoginDate.HasValue ? LastLoginDate.Value.ToString() : "null") + @"");
            if (IsLastLoginDateModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LastPasswordChangedDate = " + (LastPasswordChangedDate.HasValue ? LastPasswordChangedDate.Value.ToString() : "null") + @"");
            if (IsLastPasswordChangedDateModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="User" />.
    ///</summary>
    [DataContract]
    public class UserUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public User UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public User ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
