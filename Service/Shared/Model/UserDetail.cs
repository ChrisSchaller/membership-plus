//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "UserDetails" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="UserDetail.ApplicationID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="UserDetail.UserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="UserDetail.ApplicationID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="UserDetail.UserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CreateDate</term>
    ///      <description>See <see cref="UserDetail.CreateDate" />. Fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>BirthDate</term>
    ///      <description>See <see cref="UserDetail.BirthDate" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>Description</term>
    ///      <description>See <see cref="UserDetail.Description" />. Editable; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>Gender</term>
    ///      <description>See <see cref="UserDetail.Gender" />. Editable; nullable; max-length = 10 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>LastModified</term>
    ///      <description>See <see cref="UserDetail.LastModified" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>Photo</term>
    ///      <description>See <see cref="UserDetail.Photo" />. Editable; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>PhotoLastModified</term>
    ///      <description>See <see cref="UserDetail.PhotoLastModified" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>PhotoMime</term>
    ///      <description>See <see cref="UserDetail.PhotoMime" />. Editable; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="UserDetail.ApplicationID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="UserDetail.UserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Application_Ref</term>
    ///      <description>See <see cref="UserDetail.Application_Ref" />, which is a member of the data set "Applications" for <see cref="Application_" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserRef</term>
    ///      <description>See <see cref="UserDetail.UserRef" />, which is a member of the data set "Users" for <see cref="User" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    public class UserDetail : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ApplicationID + ":" + this.UserID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool IsInitializing
        {
            get { return _isInitializing; }
            set { _isInitializing = value; }
        }
        private bool _isInitializing = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IUserDetailService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            LoadUserRef();
            return String.Format(@"Deails for {0}", (UserRef != null ? UserRef.DistinctString : ""));
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ApplicationID
        { 
            get
            {
                return _ApplicationID;
            }
            set
            {
                if (_ApplicationID != value)
                {
                    _ApplicationID = value;
                }
            }
        }
        private string _ApplicationID = default(string);

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string UserID
        { 
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    _UserID = value;
                }
            }
        }
        private string _UserID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public DateTime CreateDate
        { 
            get
            {
                return _CreateDate;
            }
            set
            {
                if (_CreateDate != value)
                {
                    _CreateDate = value;
                }
            }
        }
        private DateTime _CreateDate = default(DateTime);

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> BirthDate
        { 
            get
            {
                return _BirthDate;
            }
            set
            {
                if (_BirthDate != value)
                {
                    _BirthDate = value;
                    if (!IsInitializing)
                        IsBirthDateModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _BirthDate = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="BirthDate" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="BirthDate" /> only if this is set to true no matter what
        /// the actual value of <see cref="BirthDate" /> is.
        /// </summary>
        [DataMember]
        public bool IsBirthDateModified
        { 
            get
            {
                return _isBirthDateModified;
            }
            set
            {
                _isBirthDateModified = value;
            }
        }
        private bool _isBirthDateModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; load delayed.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public string Description
        { 
            get
            {
                return _Description;
            }
            set
            {
                if (_Description != value)
                {
                    _Description = value;
                    if (!IsInitializing)
                        IsDescriptionModified = true;
                }
            }
        }
        private string _Description = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Description" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Description" /> only if this is set to true no matter what
        /// the actual value of <see cref="Description" /> is.
        /// </summary>
        [DataMember]
        public bool IsDescriptionModified
        { 
            get
            {
                return _isDescriptionModified;
            }
            set
            {
                _isDescriptionModified = value;
            }
        }
        private bool _isDescriptionModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "Description" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsDescriptionLoaded
        { 
            get
            {
                return _isDescriptionLoaded;
            }
            set
            {
                _isDescriptionLoaded = value;
            }
        }
        private bool _isDescriptionLoaded = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 10 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(10)]
        [DataMember(IsRequired = false)]
        public string Gender
        { 
            get
            {
                return _Gender;
            }
            set
            {
                if (_Gender != value)
                {
                    _Gender = value;
                    if (!IsInitializing)
                        IsGenderModified = true;
                }
            }
        }
        private string _Gender = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Gender" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Gender" /> only if this is set to true no matter what
        /// the actual value of <see cref="Gender" /> is.
        /// </summary>
        [DataMember]
        public bool IsGenderModified
        { 
            get
            {
                return _isGenderModified;
            }
            set
            {
                _isGenderModified = value;
            }
        }
        private bool _isGenderModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> LastModified
        { 
            get
            {
                return _LastModified;
            }
            set
            {
                if (_LastModified != value)
                {
                    _LastModified = value;
                    if (!IsInitializing)
                        IsLastModifiedModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _LastModified = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="LastModified" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LastModified" /> only if this is set to true no matter what
        /// the actual value of <see cref="LastModified" /> is.
        /// </summary>
        [DataMember]
        public bool IsLastModifiedModified
        { 
            get
            {
                return _isLastModifiedModified;
            }
            set
            {
                _isLastModifiedModified = value;
            }
        }
        private bool _isLastModifiedModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; load delayed.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public byte[] Photo
        { 
            get
            {
                return _Photo;
            }
            set
            {
                if (_Photo != value)
                {
                    _Photo = value;
                    if (!IsInitializing)
                        IsPhotoModified = true;
                }
            }
        }
        private byte[] _Photo = default(byte[]);

        /// <summary>
        /// Wether or not the value of <see cref="Photo" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Photo" /> only if this is set to true no matter what
        /// the actual value of <see cref="Photo" /> is.
        /// </summary>
        [DataMember]
        public bool IsPhotoModified
        { 
            get
            {
                return _isPhotoModified;
            }
            set
            {
                _isPhotoModified = value;
            }
        }
        private bool _isPhotoModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "Photo" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsPhotoLoaded
        { 
            get
            {
                return _isPhotoLoaded;
            }
            set
            {
                _isPhotoLoaded = value;
            }
        }
        private bool _isPhotoLoaded = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> PhotoLastModified
        { 
            get
            {
                return _PhotoLastModified;
            }
            set
            {
                if (_PhotoLastModified != value)
                {
                    _PhotoLastModified = value;
                    if (!IsInitializing)
                        IsPhotoLastModifiedModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _PhotoLastModified = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="PhotoLastModified" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="PhotoLastModified" /> only if this is set to true no matter what
        /// the actual value of <see cref="PhotoLastModified" /> is.
        /// </summary>
        [DataMember]
        public bool IsPhotoLastModifiedModified
        { 
            get
            {
                return _isPhotoLastModifiedModified;
            }
            set
            {
                _isPhotoLastModifiedModified = value;
            }
        }
        private bool _isPhotoLastModifiedModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string PhotoMime
        { 
            get
            {
                return _PhotoMime;
            }
            set
            {
                if (_PhotoMime != value)
                {
                    _PhotoMime = value;
                    if (!IsInitializing)
                        IsPhotoMimeModified = true;
                }
            }
        }
        private string _PhotoMime = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="PhotoMime" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="PhotoMime" /> only if this is set to true no matter what
        /// the actual value of <see cref="PhotoMime" /> is.
        /// </summary>
        [DataMember]
        public bool IsPhotoMimeModified
        { 
            get
            {
                return _isPhotoMimeModified;
            }
            set
            {
                _isPhotoMimeModified = value;
            }
        }
        private bool _isPhotoMimeModified = false;

        /// <summary>
        /// Entity in data set "Applications" for <see cref="Application_" /> that this entity depend upon.
        /// The corresponding foreign key set is { <see cref="UserDetail.ApplicationID" /> }.
        /// </summary>
        [DataMember]
        public Application_ Application_Ref
        {
            get 
            {
                if (_Application_Ref == null && AutoLoadApplication_Ref != null)
                    _Application_Ref = AutoLoadApplication_Ref();
                return _Application_Ref; 
            }
            set 
            { 
                _Application_Ref = value; 
            }
        }
        private Application_ _Application_Ref = null;

        /// <summary>
        /// <see cref="UserDetail.Application_Ref" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserDetail.DelLoadApplication_Ref" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadApplication_Ref()
        {
            if (_Application_Ref != null)
                return;
            if (DelLoadApplication_Ref != null)
                _Application_Ref = DelLoadApplication_Ref();
        }

        /// <summary>
        /// A delegate to load <see cref="UserDetail.Application_Ref" />.
        /// </summary>
        public Func<Application_> DelLoadApplication_Ref = null;

        /// <summary>
        /// A delegate to load <see cref="UserDetail.Application_Ref" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<Application_> AutoLoadApplication_Ref = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon.
        /// The corresponding foreign key set is { <see cref="UserDetail.UserID" /> }.
        /// </summary>
        [DataMember]
        public User UserRef
        {
            get 
            {
                if (_UserRef == null && AutoLoadUserRef != null)
                    _UserRef = AutoLoadUserRef();
                return _UserRef; 
            }
            set 
            { 
                _UserRef = value; 
            }
        }
        private User _UserRef = null;

        /// <summary>
        /// <see cref="UserDetail.UserRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserDetail.DelLoadUserRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserRef()
        {
            if (_UserRef != null)
                return;
            if (DelLoadUserRef != null)
                _UserRef = DelLoadUserRef();
        }

        /// <summary>
        /// A delegate to load <see cref="UserDetail.UserRef" />.
        /// </summary>
        public Func<User> DelLoadUserRef = null;

        /// <summary>
        /// A delegate to load <see cref="UserDetail.UserRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUserRef = null;

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(UserDetail other)
        {
            if (other == null)
                return false;
            if (ApplicationID != other.ApplicationID)
                return false;
            if (UserID != other.UserID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(UserDetail other)
        {
            if (other == null)
                return false;
            else
                return ApplicationID == other.ApplicationID &&  UserID == other.UserID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(UserDetail from, UserDetail to)
        {
            if (to.IsPersisted)
            {
                if (from.IsBirthDateModified && !to.IsBirthDateModified)
                {
                    to.BirthDate = from.BirthDate;
                    to.IsBirthDateModified = true;
                }
                if (from.IsDescriptionModified && !to.IsDescriptionModified)
                {
                    to.Description = from.Description;
                    to.IsDescriptionModified = true;
                }
                if (from.IsGenderModified && !to.IsGenderModified)
                {
                    to.Gender = from.Gender;
                    to.IsGenderModified = true;
                }
                if (from.IsLastModifiedModified && !to.IsLastModifiedModified)
                {
                    to.LastModified = from.LastModified;
                    to.IsLastModifiedModified = true;
                }
                if (from.IsPhotoModified && !to.IsPhotoModified)
                {
                    to.Photo = from.Photo;
                    to.IsPhotoModified = true;
                }
                if (from.IsPhotoLastModifiedModified && !to.IsPhotoLastModifiedModified)
                {
                    to.PhotoLastModified = from.PhotoLastModified;
                    to.IsPhotoLastModifiedModified = true;
                }
                if (from.IsPhotoMimeModified && !to.IsPhotoMimeModified)
                {
                    to.PhotoMime = from.PhotoMime;
                    to.IsPhotoMimeModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ApplicationID = from.ApplicationID;
                to.UserID = from.UserID;
                to.CreateDate = from.CreateDate;
                to.BirthDate = from.BirthDate;
                to.IsBirthDateModified = from.IsBirthDateModified;
                to.Description = from.Description;
                to.IsDescriptionModified = from.IsDescriptionModified;
                to.Gender = from.Gender;
                to.IsGenderModified = from.IsGenderModified;
                to.LastModified = from.LastModified;
                to.IsLastModifiedModified = from.IsLastModifiedModified;
                to.Photo = from.Photo;
                to.IsPhotoModified = from.IsPhotoModified;
                to.PhotoLastModified = from.PhotoLastModified;
                to.IsPhotoLastModifiedModified = from.IsPhotoLastModifiedModified;
                to.PhotoMime = from.PhotoMime;
                to.IsPhotoMimeModified = from.IsPhotoMimeModified;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(UserDetail newdata)
        {
            int cnt = 0;
            if (BirthDate != newdata.BirthDate)
            {
                BirthDate = newdata.BirthDate;
                IsBirthDateModified = true;
                cnt++;
            }
            if (Description != newdata.Description)
            {
                Description = newdata.Description;
                IsDescriptionModified = true;
                cnt++;
            }
            if (Gender != newdata.Gender)
            {
                Gender = newdata.Gender;
                IsGenderModified = true;
                cnt++;
            }
            if (LastModified != newdata.LastModified)
            {
                LastModified = newdata.LastModified;
                IsLastModifiedModified = true;
                cnt++;
            }
            bool bPhoto = Photo == null && newdata.Photo != null ||
                                                         Photo != null && newdata.Photo == null ||
                                                         Photo != null && newdata.Photo != null && Photo.Length != newdata.Photo.Length;
            if (!bPhoto && Photo != null)
            {
                for (int i = 0; i < Photo.Length; i++)
                {
                    bPhoto = Photo[i] != newdata.Photo[i];
                    if (bPhoto)
                        break;
                }
            }
            if (bPhoto)
            {
                Photo = newdata.Photo;
                IsPhotoModified = true;
                cnt++;
            }
            if (PhotoLastModified != newdata.PhotoLastModified)
            {
                PhotoLastModified = newdata.PhotoLastModified;
                IsPhotoLastModifiedModified = true;
                cnt++;
            }
            if (PhotoMime != newdata.PhotoMime)
            {
                PhotoMime = newdata.PhotoMime;
                IsPhotoMimeModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            IsInitializing = true;
            if (!IsEntityChanged)
                IsEntityChanged = IsBirthDateModified || IsDescriptionModified || IsGenderModified || IsLastModifiedModified || IsPhotoModified || IsPhotoLastModifiedModified || IsPhotoMimeModified;
            if (IsDescriptionModified && !IsDescriptionLoaded)
                IsDescriptionLoaded = true;
            if (IsPhotoModified && !IsPhotoLoaded)
                IsPhotoLoaded = true;
            IsInitializing = false;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public UserDetail ShallowCopy(bool allData = false)
        {
            UserDetail e = new UserDetail();
            e.IsInitializing = true;
            e.ApplicationID = ApplicationID;
            e.UserID = UserID;
            e.CreateDate = CreateDate;
            e.BirthDate = BirthDate;
            e.Gender = Gender;
            e.LastModified = LastModified;
            e.PhotoLastModified = PhotoLastModified;
            e.PhotoMime = PhotoMime;
            if (allData)
            {
                e.Description = Description;
                e.Photo = Photo;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = true;
            e.IsEntityChanged = false;
            e.IsInitializing = false;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[UserDetail]] =====----
  ApplicationID = '" + ApplicationID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  UserID = '" + UserID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  CreateDate = " + CreateDate + @"
  BirthDate = " + (BirthDate.HasValue ? BirthDate.Value.ToString() : "null") + @"");
            if (IsBirthDateModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  Gender = '" + (Gender != null ? Gender : "null") + @"'");
            if (IsGenderModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LastModified = " + (LastModified.HasValue ? LastModified.Value.ToString() : "null") + @"");
            if (IsLastModifiedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  PhotoLastModified = " + (PhotoLastModified.HasValue ? PhotoLastModified.Value.ToString() : "null") + @"");
            if (IsPhotoLastModifiedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  PhotoMime = '" + (PhotoMime != null ? PhotoMime : "null") + @"'");
            if (IsPhotoMimeModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="UserDetail" />.
    ///</summary>
    [DataContract]
    public class UserDetailUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public UserDetail UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public UserDetail ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
