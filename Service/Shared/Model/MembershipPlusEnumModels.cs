//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// Available entity set processing states
    /// </summary>
    [DataContract]
    public enum EntitySetProcState
    {
        /// <summary>
        /// Default value.
        /// </summary>
        [EnumMember]
        Unknown,
        /// <summary>
        /// The set is being processed.
        /// </summary>
        [EnumMember]
        Processing,
        /// <summary>
        /// The set is not being processed.
        /// </summary>
        [EnumMember]
        Stopped,
        /// <summary>
        /// The processing of the set is completed, succesffully.
        /// </summary>
        [EnumMember]
        Completed,
        /// <summary>
        /// The processing of the set is completed. However not all desired member are reached, something is wrong.
        /// </summary>
        [EnumMember]
        Incomplete,
        /// <summary>
        /// There are concurrent update conflicts, proper resolutions are required.
        /// </summary>
        [EnumMember]
        ChangeConflict,
        /// <summary>
        /// The processing of the set failed. It ends up in at least one error.
        /// </summary>
        [EnumMember]
        Failed
    }

    /// <summary>
    /// Progress event.
    /// </summary>
    [DataContract]
    public class EnumProgressEvent
    {
        /// <summary>
        /// The progressing set.
        /// </summary>
        [DataMember]
        public EntitySetType SetType
        {
            get { return _setType; }
            set { _setType = value; }
        }
        private EntitySetType _setType = EntitySetType.Unknown;

        /// <summary>
        /// Whether or not the event is for entity loading (or processing);
        /// </summary>
        [DataMember]
        public bool IsLoadEvent
        {
            get { return _isLoadEvent; }
            set { _isLoadEvent = value; }
        }
        private bool _isLoadEvent = false;

        /// <summary>
        /// The percentage of entities that have been processed.
        /// </summary>
        [DataMember]
        public Double DonePercent
        {
            get;
            set;
        }

        /// <summary>
        /// The estimated time to complete
        /// </summary>
        [DataMember]
        public Nullable<TimeSpan> EstimatedTime
        {
            get;
            set;
        }

    }

    /// <summary>
    /// Progress state changed event.
    /// </summary>
    [DataContract]
    public class EnumProgressStateEvent
    {
        /// <summary>
        /// The progressing set.
        /// </summary>
        [DataMember]
        public EntitySetType SetType
        {
            get { return _setType; }
            set { _setType = value; }
        }
        private EntitySetType _setType = EntitySetType.Unknown;

        /// <summary>
        /// The current state of processing.
        /// </summary>
        [DataMember]
        public EntitySetProcState ProcState
        {
            get { return _procState; }
            set { _procState = value; }
        }
        private EntitySetProcState _procState = EntitySetProcState.Unknown;

        /// <summary>
        /// The total number of entities to process.
        /// </summary>
        [DataMember]
        public Int64 TotalItems
        {
            get;
            set;
        }

    }

    /// <summary>
    /// Concurrent synchronization conflict record.
    /// </summary>
    [DataContract]
    public class ConcurrentUpdateConflicts<EntityT> where EntityT : class
    {
        /// <summary>
        /// The modified entity to be updated into the data set.
        /// </summary>
        [DataMember]
        public EntityT UpdatingItem
        {
            get;
            set;
        }

        /// <summary>
        /// The conflicting entity that was modified by other agents after the present entity been loaded and before the present update attempt.
        /// </summary>
        [DataMember]
        public EntityT ConflictItem
        {
            get;
            set;
        }

    }

}